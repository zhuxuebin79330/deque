#include<iostream>
#include<vector>
using namespace std;


class MyCircularDeque {
private:
    vector<int>arr;
    int front;
    int rear;
    int capacity;

public:
    /** Initialize your data structure here. Set the size of the deque to be k. */
    MyCircularDeque(int k) {
        front=0;
        rear=0;
        capacity=k+1;
        arr.assign(capacity,0);
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    bool insertFront(int value) {
        if(isFull())return false;
        front=(front-1+capacity)%capacity;
        arr[front]=value;
        return true;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    bool insertLast(int value) {
        if(isFull())return false;
        arr[rear]=value;
        rear=(rear+1)%capacity;
        return true;
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    bool deleteFront() {
        // front 被设计在数组的开头，所以是 +1
        if(isEmpty())return false;
        front=(front+1)%capacity;
        return true;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    bool deleteLast() {
        // rear 被设计在数组的末尾，所以是 -1
        if(isEmpty())return false;
        rear=(rear-1+capacity)%capacity;
        return true;
    }
    
    /** Get the front item from the deque. */
    int getFront() {
        if(isEmpty())return -1;
        return arr[front];
    }
    
    /** Get the last item from the deque. */
    int getRear() {
        // 当 rear 为 0 时防止数组越界
        if(isEmpty())return -1;
        return arr[(rear-1+capacity)%capacity];
    }
    
    /** Checks whether the circular deque is empty or not. */
    bool isEmpty() {
        return front==rear;
    }
    
    /** Checks whether the circular deque is full or not. */
    bool isFull() {
        // 注意：这个设计是非常经典的做法
        return front==(rear+1)%capacity;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */
